{
  "name": "Interview-codingchallenge-fsjs",
  "tagline": "A coding challenge for Fullstack JavaScript candidates, part of our interview process",
  "body": "# Let's code some JS!\r\n\r\nHey, welcome to the first coding challenge of your interview process, you'll be presented with a set of steps to accomplish in order to get yourself graded on \r\n\r\n> Fullstack JavaScript using the MEAN stack\r\n\r\n## The Prereqs\r\nThis challenge assumes your knowledge or skills to leverage on the following topics,\r\n\r\n  - Vanilla JavaScript (or plain JavaScript)\r\n  - NodeJS\r\n  - Express\r\n  - MongoDB\r\n  - Mongoose (or another nodejs based ORM for mongodb)\r\n  - RESTful APIs, webservices\r\n  - A client side MV* framwork or library (Angular1, Angular2, React(not an mvc, tho) )\r\n  - Code quality and testing\r\n\r\n## The rules\r\n\r\nThis challenge is not set by any hard rule regarding time or style, although both will play key factors on your assessment, yet, here are some rules because... rules\r\n\r\n  * You have to fork this project and work on your copy of the code for this to work\r\n  * You must create a commit per step of the challenge finished, wether you want to push it or not is up to you\r\n  * You have to open a pull request to the original repo once you feel your code is ready, for your code to be assessed\r\n  * You are not limited to the set of tools listed on **The prereqs**, you can use any additional tools you feel or know will aid you on your quest\r\n  * You don't need to complete the whole challenge to create a pull request, if you get stuck at some point, create the pull request and write your issues in the comments\r\n\r\n## The challenge\r\n\r\nYou will be creating a simple server-client application so common nowadays, using the MEAN stack, the requirements are as follows.\r\n\r\n  - As an individual, \r\n    - I need a way to create lists of my favorite stuff ( so cliche, right? ) so, several lists of different stuff (books, movies, stores, pizza flavors, whatevs...)\r\n    - I need a way to add, edit, and delete items on such lists\r\n    - I need a way to view the lists I create\r\n  - As a developer,\r\n    - I need the node_modules to be ignored by git \r\n    - I need to be able to access the CRUD capabilities of the lists through a RESTful API, json based, from external domains\r\n    - I need schemas ( mongoose preferred ) for the Lists and Items entities\r\n    - I need an exposed CRUD API to affect the Lists and Items entities using the correct HTTP verbs for each\r\n      - Create, update, remove, fetch all and fetch by id should be supported for lists and items (10 endpoints total)\r\n    - I need middleware to happen on each request validating that the user has a cookie named \"auth\" or not (log the value to output, we are not managing authentication of any kind just yet)\r\n    \r\n    - I need a test suit testing the endpoints \r\n    - I need a test suit testing the middleware covering the cases where the user has a cookie named \"auth\", a cookie with another name or no cookie at all\r\n     \r\n\r\n## The small print\r\n\r\nStuff that will be graded\r\n\r\n    Logic and code complexity   ( How easy will my code be to maintain by someone else? Am I using good practices and/or design patterns? )\r\n    Code coverage               ( Is my code tested? Are all scenarios considered? )\r\n    Requirement coverage        ( Is the application doing what it is meant to be doing? )\r\n    Rule compliance             ( Did i follow the few rules set on **The rules** ? )\r\n    ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}